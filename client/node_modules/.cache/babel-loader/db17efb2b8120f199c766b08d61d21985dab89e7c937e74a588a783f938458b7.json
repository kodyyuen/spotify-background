{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kody\\\\projects\\\\spotify-background\\\\client\\\\src\\\\background\\\\gradient-background.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getLyricsColorsThunk, getLyricsThunk, getSpotifyCurrentSongThunk } from \"../spotify/app-thunks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GradientBackground = () => {\n  _s();\n  const [gradient, setGradient] = useState([\"red\", \"blue\", \"yellow\"]);\n  const [lastCurrentSong, setLastCurrentSong] = useState(\"\");\n  const [repeat, setRepeat] = useState(true);\n  const {\n    songItem,\n    songName,\n    songArtist,\n    lyrics,\n    colors\n  } = useSelector(state => state.app);\n  let timer;\n  const dispatch = useDispatch();\n  const colors2 = [\"rgb(33, 47, 61)\", \"red\", \"(46, 204, 113)\", \"rgb(255, 215, 0)\"];\n  const style = {\n    background: `\n    linear-gradient(140deg, ${colors[0]}, rgba(0,0,0,0) 70%),\n    linear-gradient(220deg, ${colors[1]}, rgba(0,0,0,0) 70%),\n    linear-gradient(320deg, ${colors[2]}, rgba(0,0,0,0) 70%),\n    linear-gradient(40deg, ${colors[3]}, rgba(0,0,0,0) 70%)`,\n    // background: `linear-gradient(45deg, ${gradient.join(\",\")})`,\n    // background: \"radial-gradient(#e66465, #9198e5, blue, red)\",\n    // background: `linear-gradient(45deg, #e66465, #9198e5)`,\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient\n    // https://medium.com/@stvehayes/working-with-spotifys-api-to-display-currently-playing-with-react-99544f8797d8\n    // https://leerob.io/blog/spotify-api-nextjs\n    backgroundSize: \"150% 150%\",\n    width: \"100%\",\n    height: \"100%\"\n  };\n  const getRandomKey = () => {\n    return Math.random(100);\n  };\n  const changeGradient = colors => {\n    setGradient(colors);\n  };\n  const updateCurrentSong = () => {\n    console.log(\"updateCurrentSong\");\n    console.log(\"repeat: \" + repeat);\n    if (repeat) {\n      dispatch(getSpotifyCurrentSongThunk());\n      timer = setTimeout(updateCurrentSong, 10000);\n    } else {\n      clearTimeout(timer);\n      return;\n    }\n  };\n  const toggleCurrentSongFunc = () => {\n    let r = !repeat;\n    setRepeat(r);\n    updateCurrentSong();\n  };\n  useEffect(() => {\n    console.log(\"useEffect\");\n    // dispatch(getSpotifyCurrentSongThunk());\n    updateCurrentSong();\n  }, []);\n  useEffect(() => {\n    console.log(\"balls1\");\n    // console.log(colors)\n    // if (currentSong && lastCurrentSong !== currentSong.item.name) {\n    //   dispatch(\n    //     getLyricsColorsThunk({\n    //       track: currentSong.item.name,\n    //       artist: currentSong.item.artists[0].name,\n    //     })\n    //   );\n    //   setLastCurrentSong(currentSong.item.name);\n    //   console.log('balls2')\n    //   console.log(currentSong.item.name)\n    //   console.log(lastCurrentSong)\n    dispatch(getLyricsColorsThunk({\n      track: songName,\n      artist: songArtist\n    }));\n  }, [songName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: style,\n    className: \"bg-animation\",\n    children: [songName && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: songName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: lyrics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => toggleCurrentSongFunc(),\n      children: \"Click me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, getRandomKey(), true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(GradientBackground, \"S7ttSD/Dtnc0/ghJlf/DlC2/YU4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = GradientBackground;\nexport default GradientBackground;\nvar _c;\n$RefreshReg$(_c, \"GradientBackground\");","map":{"version":3,"names":["useEffect","useState","useSelector","useDispatch","getLyricsColorsThunk","getLyricsThunk","getSpotifyCurrentSongThunk","jsxDEV","_jsxDEV","GradientBackground","_s","gradient","setGradient","lastCurrentSong","setLastCurrentSong","repeat","setRepeat","songItem","songName","songArtist","lyrics","colors","state","app","timer","dispatch","colors2","style","background","backgroundSize","width","height","getRandomKey","Math","random","changeGradient","updateCurrentSong","console","log","setTimeout","clearTimeout","toggleCurrentSongFunc","r","track","artist","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/kody/projects/spotify-background/client/src/background/gradient-background.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  getLyricsColorsThunk,\r\n  getLyricsThunk,\r\n  getSpotifyCurrentSongThunk,\r\n} from \"../spotify/app-thunks\";\r\n\r\nconst GradientBackground = () => {\r\n  const [gradient, setGradient] = useState([\"red\", \"blue\", \"yellow\"]);\r\n  const [lastCurrentSong, setLastCurrentSong] = useState(\"\");\r\n  const [repeat, setRepeat] = useState(true);\r\n  const { songItem, songName, songArtist, lyrics, colors } = useSelector(\r\n    (state) => state.app\r\n  );\r\n  let timer;\r\n  const dispatch = useDispatch();\r\n\r\n  const colors2 = [\r\n    \"rgb(33, 47, 61)\",\r\n    \"red\",\r\n    \"(46, 204, 113)\",\r\n    \"rgb(255, 215, 0)\",\r\n  ];\r\n  const style = {\r\n    background: `\r\n    linear-gradient(140deg, ${colors[0]}, rgba(0,0,0,0) 70%),\r\n    linear-gradient(220deg, ${colors[1]}, rgba(0,0,0,0) 70%),\r\n    linear-gradient(320deg, ${colors[2]}, rgba(0,0,0,0) 70%),\r\n    linear-gradient(40deg, ${colors[3]}, rgba(0,0,0,0) 70%)`,\r\n    // background: `linear-gradient(45deg, ${gradient.join(\",\")})`,\r\n    // background: \"radial-gradient(#e66465, #9198e5, blue, red)\",\r\n    // background: `linear-gradient(45deg, #e66465, #9198e5)`,\r\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient\r\n    // https://medium.com/@stvehayes/working-with-spotifys-api-to-display-currently-playing-with-react-99544f8797d8\r\n    // https://leerob.io/blog/spotify-api-nextjs\r\n    backgroundSize: \"150% 150%\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  };\r\n  const getRandomKey = () => {\r\n    return Math.random(100);\r\n  };\r\n  const changeGradient = (colors) => {\r\n    setGradient(colors);\r\n  };\r\n\r\n  const updateCurrentSong = () => {\r\n    console.log(\"updateCurrentSong\");\r\n    console.log(\"repeat: \" + repeat);\r\n    if (repeat) {\r\n      dispatch(getSpotifyCurrentSongThunk());\r\n      timer = setTimeout(updateCurrentSong, 10000);\r\n    } else {\r\n      clearTimeout(timer);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const toggleCurrentSongFunc = () => {\r\n    let r = !repeat;\r\n    setRepeat(r);\r\n    updateCurrentSong();\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"useEffect\");\r\n    // dispatch(getSpotifyCurrentSongThunk());\r\n    updateCurrentSong();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"balls1\");\r\n    // console.log(colors)\r\n    // if (currentSong && lastCurrentSong !== currentSong.item.name) {\r\n    //   dispatch(\r\n    //     getLyricsColorsThunk({\r\n    //       track: currentSong.item.name,\r\n    //       artist: currentSong.item.artists[0].name,\r\n    //     })\r\n    //   );\r\n    //   setLastCurrentSong(currentSong.item.name);\r\n    //   console.log('balls2')\r\n    //   console.log(currentSong.item.name)\r\n    //   console.log(lastCurrentSong)\r\n    dispatch(\r\n      getLyricsColorsThunk({\r\n        track: songName,\r\n        artist: songArtist,\r\n      })\r\n    );\r\n  }, [songName]);\r\n\r\n  return (\r\n    <div key={getRandomKey()} style={style} className=\"bg-animation\">\r\n      {songName && (\r\n        <div className=\"row\">\r\n          <h1>{songName}</h1>\r\n        </div>\r\n      )}\r\n      <div className=\"row\">\r\n        <h1>{lyrics}</h1>\r\n      </div>\r\n      <button onClick={() => toggleCurrentSongFunc()}>Click me</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GradientBackground;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}